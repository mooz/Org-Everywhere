// XULアプリの更新状況をRSS化2 

// 動作に必要な物：
//    APPNAME\index.html      : 日本語版の配布ページのHTML
//    APPNAME\index.html.en   : 英語版の配布ページのHTML
//    APPNAME\history.html    : 日本語版の更新履歴ページのHTML
//    APPNAME\history.html.en : 英語版の更新履歴ページのHTML
//    xul.xml                 : 日本語版の更新情報RSS
//    xul.xml.en              : 英語版の更新情報RSS
//
// index.html(.en) または history.html(.en) でこのマクロを実行すると、
// xul.xml と xul.xml.en が更新される。

$workdir   = "o:\\xul";         // 作業ディレクトリ
$hashname  = "sha1hash.txt";    // ハッシュ値が記述されているファイルの名前
$hashroot  = "d:\\data\\codes"; // $hashname が作業ディレクトリ以外の場所にある場合の、ファイルのありか
$htmlextja = ".html";           // 日本語版HTMLの拡張子
$htmlexten = ".html.en";        // 英語版HTMLの拡張子
$xpiextja  = ".xpi";            // 日本語版XPIの拡張子
$xpiexten  = "_en.xpi";         // 英語版XPIの拡張子
$rssja     = "xul.xml";         // 日本語版RSSのファイル名
$rssen     = "xul.xml.en";      // 英語版RSSのファイル名
$htmldist  = "http://piro.sakura.ne.jp/xul"; // HTMLファイルを公開する時のパス
$xpidist   = "http://piro.sakura.ne.jp/xul/xpi"; // XPIファイルを公開する時のパス
$tempdir   = "c:\\temp";        // 作業中に一時ファイルを置くディレクトリ
	
//初期化 

$filename = filename;
if (!existfile($workdir)) {
	$workdir = directory;
}

$appname = rightstr(filename, strlen(filename)-strstr(filename, "\\xul\\")-5);
$appname = leftstr($appname, strstr($appname, "\\"));

call createRSSFromHTML2 $workdir + "\\" + $appname + "\\index" + $htmlextja, $workdir + "\\" + $appname + "\\history" + $htmlextja, $workdir + "\\" + $rssja;
call createRSSFromHTML2 $workdir + "\\" + $appname + "\\index" + $htmlexten, $workdir + "\\" + $appname + "\\history" + $htmlexten, $workdir + "\\" + $rssen;

call copyTo $workdir + "\\" + $rssen, $workdir + "\\update.rdf";

endmacro;
 
// RSS生成 

// 引数：
//  $$1 : index.html(.en)ファイルのパス
//  $$2 : history.html(.en)ファイルのパス
//  $$3 : RSSファイルのパス

createRSSFromHTML2:
	
// 情報を取得 
	 
// index.htmlの初期化 

#startX = x;
#startY = y;
#shouldClose = 0;

if (filename != $$1 && findhidemaru($$1) == -1) {
	openfile $$1;
	#shouldClose = 1;
}
setactivehidemaru findhidemaru($$1);
if (#shouldClose == 1) {
	setwindowsize 1, 1;
}

disabledraw;
 
// タイトル取得 
gofiletop;
searchdown "<h1";
escape;
golinetop2;
#topx = x;
#topy = y;
searchdown "</h1";
escape;
golineend2;
$title = gettext(#topx, #topy, x, y);

call openTempWin;

insert $title;
if (strstr($$1, $htmlexten) < 0)
	replaceallfast "\\t+<h1>[- _a-zA-Z0-9]+\\n", "", regular;
replaceallfast "<[^>]+>", "", regular;
replaceallfast "\\t", "", regular;
replaceallfast "\\n", " ", regular;
selectall;
$title = gettext(seltopx, seltopy, selendx, selendy);

call closeTempWin $$1;
 
// URL取得 
if (strstr($$1, $htmlexten) < 0)
	$link = $link+"index" + $htmlextja;
else
	$link = $link+"index" + $htmlexten;
 
// index.htmlの終了処理 

if (#shouldClose == 1) {
	setactivehidemaru findhidemaru($filename);
	closehidemaruforced findhidemaru($$1);
	disabledraw;
} else {
	setactivehidemaru findhidemaru($$1);
	moveto #startX, #startY;
	enabledraw;
}
 
// history.htmlの初期化 

#startX = x;
#startY = y;
#shouldClose = 0;

if (filename != $$2 && findhidemaru($$2) == -1) {
	openfile $$2;
	#shouldClose = 1;
}
setactivehidemaru findhidemaru($$2);
if (#shouldClose == 1) {
	setwindowsize 1, 1;
}

disabledraw;
 
// 更新内容取得 
call searchNodeById "history";
searchdown "<dd><ul>";
escape;
golineend2;
right;
#topx = x;
#topy = y;
searchdown "</ul></dd>";
escape;
golinetop2;
left;
$desc = gettext(#topx, #topy, x, y);

call openTempWin;

insert $desc;
replaceallfast "<[^>]+>", "", regular;
replaceallfast "\\t", "", regular;
replaceallfast "\\n+", ", ", regular;
replaceallfast "\\n", "", regular;
selectall;
$desc = gettext(seltopx, seltopy, selendx, selendy);

if (strlen($desc) > 80) {
	#endy = selendy;
	escape;
	gofiletop;
	beginsel;
	right 80;
	if ($desc != gettext(seltopx, seltopy, selendx, selendy)) {
		$desc = gettext(seltopx, seltopy, selendx, selendy)+"...";
	}
}

call closeTempWin $$1;
 
// history.htmlの終了処理 

if (#shouldClose == 1) {
	setactivehidemaru findhidemaru($filename);
	closehidemaruforced findhidemaru($$2);
	disabledraw;
} else {
	setactivehidemaru findhidemaru($$2);
	moveto #startX, #startY;
	enabledraw;
}
 
// ハッシュ値取得 
$hash   = "";
$hashen = "";

if (existfile($hashroot + "\\" + $appname + "\\" + $hashname)) $hashfile = $hashroot + "\\" + $appname + "\\" + $hashname;
else if (existfile($hashroot + "\\" + $hashname)) $hashfile = $hashroot + "\\" + $hashname;
else if (existfile($workdir + "\\" + $appname + "\\" + $hashname)) $hashfile = $workdir + "\\" + $appname + "\\" + $hashname;
else $hashfile = $workdir + "\\" + $hashname;

if (existfile($hashfile)) {
	openfile $hashfile;
	setactivehidemaru findhidemaru($hashfile);
	setwindowsize 1, 1;
	disabledraw;

	#topx = x;
	#topy = y;
	searchdown "*"+$appname+".xpi";
	if (x > #topx || y > #topy) {
		searchup " ";
		beginsel;
		golinetop2;
		$hash = gettext(seltopx, seltopy, selendx, selendy);;
		escape;
		gofiletop;
	}

	searchdown "*"+$appname+"_en.xpi";
	if (x > #topx || y > #topy) {
		searchup " ";
		beginsel;
		golinetop2;
		$hashen = gettext(seltopx, seltopy, selendx, selendy);;
		escape;
		gofiletop;
	}

	setactivehidemaru findhidemaru($filename);
	closehidemaruforced findhidemaru($hashfile);
	disabledraw;
}
  
// ファイル更新 
openfile $$3;
setactivehidemaru findhidemaru($$3);
setwindowsize 1, 1;
disabledraw;
	 
// 日付更新 

gofiletop;
searchdown "<dc:date>";
escape;
right 9;
#topx = x;
#topy = y;
left;
searchdown "</dc:date>";
escape;
beginsel;
moveto #topx, #topy;
delete;
insert year+"-"+month+"-"+day+"T"+time+"+09:00";
 
// liの移動 

searchdown "<rdf:li rdf:resource=\""+$link+"\"/>";
escape;
golineend2;
right;
beginsel;
up;
golinetop2;
$newli = gettext(seltopx, seltopy, selendx, selendy);
escape;
beginsel;
golineend2;
right;
delete;
escape;
gofiletop;
searchdown "<rdf:Seq>";
escape;
golineend2;
right;
insert $newli;
 
// itemの更新 

searchdown "<item rdf:about=\""+$link+"\">";
escape;

searchdown "<title>";
escape;
right 7;
#topx = x; #topy = y;
left;
searchdown "</title>";
escape;
beginsel;
moveto #topx, #topy;
delete;
insert $title;

searchdown "<description>";
escape;
right 13;
#topx = x; #topy = y;
left;
searchdown "</description>";
escape;
beginsel;
moveto #topx, #topy;
delete;
insert $desc;

searchdown "<dc:date>";
escape;
right 9;
#topx = x; #topy = y;
left;
searchdown "</dc:date>";
escape;
beginsel;
moveto #topx, #topy;
delete;
insert year+"-"+month+"-"+day+"T"+time+"+09:00";


searchdown "</item>";
#endy = y;
moveto #topx, #topy;

$version = rightstr($title, strlen($title)-strstr($title, "Ver.")-4);
if (strstr($version, " ") != -1) {
	$version = leftstr($version, strstr($version, " "));
}
searchdown "<em:version>";
if (y < #endy) {
	escape;
	right 12;
	#topx = x; #topy = y;
	searchdown "<";
	escape;
	beginsel;
	moveto #topx, #topy;
	delete;
	insert $version;
}
else {
	searchup "</item>";
}


#topx = x; #topy = y;
searchdown $xpidist + "/" + $appname + $xpiexten;
if (y > #topy) {
	$hash = $hashen;
}
escape;

searchdown "<em:updateHash>sha1:";
escape;
right 20;
#topx = x; #topy = y;
left;
searchdown "</em:updateHash>";
escape;
beginsel;
moveto #topx, #topy;
delete;
insert $hash;


searchup "<item";
escape;
golinetop2;
beginsel;
searchdown "</item>";
golineend2;
down 2;
golinetop2;
#topx = seltopx;
#topy = seltopy;
$item = gettext(#topx, #topy, selendx, selendy);
escape;
beginsel;
moveto #topx, #topy;
delete;

searchup "</channel>";
golineend2;
down 2;
golinetop2;
escape;
insert $item;
  
// 終了処理 
save;

if (#shouldClose == 1) {
	setactivehidemaru findhidemaru($filename);
	closehidemaruforced findhidemaru($$1);
	closehidemaruforced findhidemaru($$2);
	closehidemaruforced findhidemaru($$3);
} else {
	setactivehidemaru findhidemaru($filename);
	closehidemaruforced findhidemaru($$3);
	moveto #startX, #startY;
}

enabledraw;
return;
  
// ユーティリティ関数 
openTempWin:
	if (!existfile($tempdir)) $tempdir = $workdir;
	openfile $tempdir + "\\hdtemp.txt";
	setactivehidemaru findhidemaru($tempdir + "\\hdtemp.txt");
	setwindowsize 1, 1;
	disabledraw;
	selectall;
	delete;
return;

// $$1 : 戻り先ウィンドウのファイルパス
closeTempWin:
	setactivehidemaru findhidemaru($$1);
	if (!existfile($tempdir)) $tempdir = $workdir;
	closehidemaruforced findhidemaru($tempdir + "\\hdtemp.txt");
	disabledraw;
return;

// $$1 : 元ファイルのフルパス
// $$2 : コピー先のフルパス
copyTo:
	openfile $$1;
	setwindowsize 1, 1;
	saveas $$2;
	setactivehidemaru findhidemaru($filename);
	closehidemaruforced findhidemaru($$2);
return;
  
//==========================================================
// ■ W3C-DOM風サブルーチン集
// ルーチン定義 Ver.1.6a 
//
// made by Piro http://www.cc-net.or.jp/~piro/
//----------------------------------------------------------
	
//==========================================================
// 既存ノードを操作する 
//----------------------------------------------------------
	 
//==========================================================
// 検索 
//----------------------------------------------------------
// ノードを検索し、ノードの先頭へ移動します。
//----------------------------------------------------------
	 
//----------------------------------------------------------
searchNodeByTagName: 

call searchNodeTop "<"+$$1+"( [^>]*[^-]>|>)", $$2;
if (!##return) return 0;

escape;
if ($$3 == "inner") {
	searchdown ">\\n?", regular;
	right;
}
return 1;
 
//----------------------------------------------------------
searchNodeByTagAttr: 

call searchNodeTop "<"+$$1+"( [^>]* | )"+$$2+"=(\".* |\")"+$$3+"( [^\"]*\"[^>]*[^-]|\"[^>]*[^-]|\")>", $$4;
if (!##return) return 0;

escape;
if ($$5 == "inner") {
	searchdown ">\\n?", regular;
	right;
}
return 1;
 
//----------------------------------------------------------
searchNodeByAttr: 

call searchNodeTop "<[^!][^>]* "+$$1+"=(\".* |\")"+$$2+"( [^\"]*\"[^>]*[^-]|\"[^>]*[^-]|\")>", $$3;
if (!##return) return 0;

escape;
if ($$4 == "inner") {
	searchdown ">\\n?", regular;
	right;
}
return 1;
 
//----------------------------------------------------------
searchNodeById: 

call searchNodeTop "<[^!][^>]* id=\""+$$1+"(\"[^>]*[^-]|\")>", "alldown";
if (!##return) return 0;

escape;
if ($$2 == "inner") {
	searchdown ">\\n?", regular;
	right;
}
return 1;
 
//----------------------------------------------------------
searchNodeByAttrId: 

call searchNodeTop "<[^!][^>]* "+$$1+"=\""+$$2+"(\"[^>]*[^-]|\")>", "alldown";
if (!##return) return 0;

escape;
if ($$3 == "inner") {
	searchdown ">\\n?", regular;
	right;
}
return 1;
 
//==========================================================
// x個目のノードを検索する 
//----------------------------------------------------------
	
//----------------------------------------------------------
searchNodeByTagNameAt: 

call searchNodeByTagName $$1, "alldown";
if (!##return) return 0;

##i = 0;
while (##i < ##2) {
	moveto selendx, selendy;
	call searchNodeByTagName $$1, "down";
	if (!##return) return 0;
	##i = ##i+1;
}

if ($$3 == "inner") {
	searchdown ">\\n?", regular;
	right;
}
return 1;
 
//----------------------------------------------------------
searchNodeByTagAttrAt: 

call searchNodeByTagAttr $$1, $$2, $$3, "alldown";
if (!##return) return 0;

##i = 0;
while (##i < ##4) {
	moveto selendx, selendy;
	call searchNodeByTagName $$1, $$2, $$3, "down";
	if (!##return) return 0;
	##i = ##i+1;
}

if ($$5 == "inner") {
	searchdown ">\\n?", regular;
	right;
}
return 1;
 
//----------------------------------------------------------
searchNodeByAttrAt: 

call searchNodeByAttr $$1, $$2, "alldown";
if (!##return) return 0;

##i = 0;
while (##i < ##3) {
	moveto selendx, selendy;
	call searchNodeByAttr $$1, $$2, "down";
	if (!##return) return 0;
	##i = ##i+1;
}

if ($$4 == "inner") {
	searchdown ">\\n?", regular;
	right;
}
return 1;
   
//==========================================================
// 選択 
//----------------------------------------------------------
// ノードの開始タグから終了タグまでを
// （終了タグ直後に改行がある場合、それも含めて）選択します。
//----------------------------------------------------------
	
_selectNode: 

// ・指定座標から始まるノードを選択する
//   （返り値：成功時 1, タグがコメント内にある時 0）
//     selectNode "取得開始x座標", "取得開始y座標" [,"inner"]

##debug = 0;

$$query = "<[^<>]*[^/-]>\\n?";

escape;
left;
searchdown $$query, regular;
##seltopx = x;
##seltopy = y;
searchdown ">";
right;
$$firstTag = gettext(##seltopx, ##seltopy, x, y);
if (strstr($$firstTag, "</") > -1) ##nest = 0; else ##nest = 1;

##checkTopX = x;
##checkTopY = y;
##innerComment = 0;

while (##nest > 0) {
	searchdown $$query, regular;

	##seltopx = x;
	##seltopy = y;
	searchdown ">";
	right;

	$$openTag = gettext(##seltopx, ##seltopy, x, y);
	$$checkText = gettext(##checkTopX, ##checkTopY, x, y);
	if (strstr($$checkText, "<!--") > -1) ##innerComment = ##innerComment+1;
	if (strstr($$checkText, "-->") > -1) ##innerComment = ##innerComment-1;

	##checkTopX = x;
	##checkTopY = y;
	moveto ##seltopx, ##seltopy;

	if (##innerComment > 0) continue;

	if (strstr($$openTag, "</") > -1) {
		##nest = ##nest-1;
		if (##debug) message "nest:-1▼ "+$$checkText;
	} else {
		##nest = ##nest+1;
		if (##debug) message "nest:+1▲ "+$$checkText;
	}

	if (##nest < 1) continue;
}

escape;
searchdown ">";
right;
if (code == 0x0A || code == 0x0D) right;

beginsel;
moveto ##1, ##2;

if ($$3 == "inner") {
	moveto selendx, selendy;
	searchup "<";
	beginsel;
	moveto ##1, ##2;
	searchdown ">\\n?", regular;
	right;
}

return 1;
 
//----------------------------------------------------------
selectNodeByTagName: 

call searchNodeByTagName $$1, $$2;
if (!##return) return 0;

call _selectNode seltopx, seltopy, $$3;
return 1;
 
//----------------------------------------------------------
selectNodeByTagAttr: 

call searchNodeByTagAttr $$1, $$2, $$3, $$4;
if (!##return) return 0;

call _selectNode seltopx, seltopy, $$5;
return 1;
 
//----------------------------------------------------------
selectNodeByAttr: 

call searchNodeByAttr $$1, $$2, $$3;
if (!##return) return 0;

call _selectNode seltopx, seltopy, $$4;
return 1;
 
//----------------------------------------------------------
selectNodeById: 

call searchNodeById $$1;
if (!##return) return 0;

call _selectNode seltopx, seltopy, $$2;
return 1;
 
//----------------------------------------------------------
selectNodeByAttrId: 

call searchNodeByAttrId $$1, $$2;
if (!##return) return 0;

call _selectNode seltopx, seltopy, $$3;
return 1;
 
//==========================================================
// x個目のノードを選択する 
//----------------------------------------------------------
	
//----------------------------------------------------------
selectNodeByTagNameAt: 

call searchNodeByTagName $$1, "alldown";
if (!##return) return 0;

##i = 0;
while (##i < ##2) {
	moveto selendx, selendy;
	call searchNodeByTagName $$1, "down";
	if (!##return) return 0;
	##i = ##i+1;
}

call _selectNode seltopx, seltopy, $$3;
return 1;
 
//----------------------------------------------------------
selectNodeByTagAttrAt: 

call searchNodeByTagAttr $$1, $$2, $$3, "alldown";
if (!##return) return 0;

##i = 0;
while (##i < ##4) {
	moveto selendx, selendy;
	call searchNodeByTagName $$1, $$2, $$3, "down";
	if (!##return) return 0;
	##i = ##i+1;
}

call _selectNode seltopx, seltopy, $$5;
return 1;
 
//----------------------------------------------------------
selectNodeByAttrAt: 

call searchNodeByAttr $$1, $$2, "alldown";
if (!##return) return 0;

##i = 0;
while (##i < ##3) {
	moveto selendx, selendy;
	call searchNodeByAttr $$1, $$2, "down";
	if (!##return) return 0;
	##i = ##i+1;
}

call _selectNode seltopx, seltopy, $$4;
return 1;
   
//==========================================================
// 削除 
//----------------------------------------------------------
// ノードを検索し、ノードの開始タグから終了タグまでを
// （終了タグ直後に改行がある場合、それも含めて）削除します。
//----------------------------------------------------------
	
//----------------------------------------------------------
removeNodeByTagName: 

call selectNodeByTagName $$1, $$2, $$3;
if (!##return) return 0;
delete;
return 1;
 
//----------------------------------------------------------
removeNodeByTagAttr: 

call selectNodeByTagAttr $$1, $$2, $$3, $$4, $$5;
if (!##return) return 0;
delete;
return 1;
 
//----------------------------------------------------------
removeNodeByAttr: 

call selectNodeByAttr $$1, $$2, $$3, $$4;
if (!##return) return 0;
delete;
return 1;
 
//----------------------------------------------------------
removeNodeById: 

call selectNodeById $$1, $$2;
if (!##return) return 0;
delete;
return 1;
 
//----------------------------------------------------------
removeNodeByAttrId: 

call selectNodeByAttrId $$1, $$2, $$3;
if (!##return) return 0;
delete;
return 1;
 
//==========================================================
// x個目のノードを削除する 
//----------------------------------------------------------
	
//----------------------------------------------------------
removeNodeByTagNameAt: 

call selectNodeByTagNameAt $$1, ##2, $$3;
if (!##return) return 0;
delete;
return 1;
 
//----------------------------------------------------------
removeNodeByTagAttrAt: 

call selectNodeByTagAttrAt $$1, $$2, $$3, ##4, $$5;
if (!##return) return 0;
delete;
return 1;
 
//----------------------------------------------------------
removeNodeByAttrAt: 

call selectNodeByAttrAt $$1, $$2, ##3, $$4;
if (!##return) return 0;
delete;
return 1;
   
//==========================================================
// 属性を設定する 
//----------------------------------------------------------
	
_setAttr: 

beginsel;
searchdown ">";
$$openTag = gettext(seltopx, seltopy, selendx, selendy);
##topx = seltopx;
##topy = seltopy;
moveto ##topx, ##topy;
escape;

left;
if (strstr($$openTag, " "+$$1+"=\"") > -1) {
	replacedown " "+$$1+"=\"\\f[^\"]*\\f\"", "\\0"+$$2+"\"", regular;
} else {
	replacedown "\\f ?/?>", " "+$$1+"=\""+$$2+"\"\\1", regular;
}

moveto ##topx, ##topy;
escape;
return;
 
//----------------------------------------------------------
setAttrByTagName: 

call searchNodeByTagName $$1, $$4;
if (!##return) return 0; else call _setAttr $$2, $$3;
return 1;
 
//----------------------------------------------------------
setAttrByTagAttr: 

call searchNodeByTagAttr $$1, $$2, $$3, $$6;
if (!##return) return 0; else call _setAttr $$4, $$5;
return 1;
 
//----------------------------------------------------------
setAttrByAttr: 

call searchNodeByAttr $$1, $$2, $$5;
if (!##return) return 0; else call _setAttr $$3, $$4;
return 1;
 
//----------------------------------------------------------
setAttrById: 

call searchNodeById $$1, "alldown";
if (!##return) return 0; else call _setAttr $$2, $$3;
return 1;
 
//----------------------------------------------------------
setAttrByAttrId: 

call searchNodeByAttr $$1, $$2, "alldown";
if (!##return) return 0; else call _setAttr $$3, $$4;
return 1;
 
//==========================================================
// x個目のノードの属性を設定する 
//----------------------------------------------------------
	
//----------------------------------------------------------
setAttrByTagNameAt: 

call searchNodeByTagNameAt $$1, ##4;
if (!##return) return ""; else call _setAttr $$2, $$3;
return $$return;
 
//----------------------------------------------------------
setAttrByTagAttrAt: 

call searchNodeByTagAttrAt $$1, $$2, $$3, ##6;
if (!##return) return ""; else call _setAttr $$4, $$5;
return $$return;
 
//----------------------------------------------------------
setAttrByAttrAt: 

call searchNodeByAttrAt $$1, $$2, ##5;
if (!##return) return ""; else call _setAttr $$3, $$4;
return $$return;
   
//==========================================================
// 属性値を得る 
//----------------------------------------------------------
	
_getAttr: 

beginsel;
searchdown ">";
$$openTag = gettext(seltopx, seltopy, selendx, selendy);
##topx = seltopx;
##topy = seltopy;
moveto ##topx, ##topy;
escape;

if (strstr($$openTag, " "+$$1+"=\"") < 0) return "";

left;
searchdown " "+$$1+"=\"", regular;
searchdown "\"";
right;
##selTopX = x;
##selTopY = y;
searchdown "\"";
$$ret = gettext(##selTopX, ##selTopY, x, y);

moveto ##topx, ##topy;
escape;
return $$ret;
 
//----------------------------------------------------------
getAttrByTagName: 

call searchNodeByTagName $$1, $$3;
if (!##return) return ""; else call _getAttr $$2;
return $$return;
 
//----------------------------------------------------------
getAttrByTagAttr: 

call searchNodeByTagAttr $$1, $$2, $$3, $$5;
if (!##return) return ""; else call _getAttr $$4;
return $$return;
 
//----------------------------------------------------------
getAttrByAttr: 

call searchNodeByAttr $$1, $$2, $$4;
if (!##return) return ""; else call _getAttr $$3;
return $$return;
 
//----------------------------------------------------------
getAttrById: 

call searchNodeById $$1, "alldown";
if (!##return) return ""; else call _getAttr $$2;
return $$return;
 
//----------------------------------------------------------
getAttrByAttrId: 

call searchNodeByAttrId $$1, $$2, "alldown";
if (!##return) return ""; else call _getAttr $$3;
return $$return;
 
//==========================================================
// x個目のノードの属性値を得る 
//----------------------------------------------------------
	
//----------------------------------------------------------
getAttrByTagNameAt: 

call searchNodeByTagNameAt $$1, ##3;
if (!##return) return ""; else call _getAttr $$2;
return $$return;
 
//----------------------------------------------------------
getAttrByTagAttrAt: 

call searchNodeByTagAttrAt $$1, $$2, $$3, ##5;
if (!##return) return ""; else call _getAttr $$4;
return $$return;
 
//----------------------------------------------------------
getAttrByAttrAt: 

call searchNodeByAttrAt $$1, $$2, ##4;
if (!##return) return ""; else call _getAttr $$3;
return $$return;
   
//==========================================================
// 個々のノードを得る 
//----------------------------------------------------------
// ノードを検索し、ノードの開始タグから終了タグまでを
// （終了タグ直後に改行がある場合、それも含めて）
// 文字列として返します。
//----------------------------------------------------------
	
//----------------------------------------------------------
getElementByTagName: 

call selectNodeByTagName $$1, $$2, $$3;
if (!##return) return "";
$$ret = gettext(seltopx, seltopy, selendx, selendy);
escape;
return $$ret;
 
//----------------------------------------------------------
getElementByTagAttr: 

call selectNodeByTagAttr $$1, $$2, $$3, $$4, $$5;
if (!##return) return "";
$$ret = gettext(seltopx, seltopy, selendx, selendy);
escape;
return $$ret;
 
//----------------------------------------------------------
getElementByAttr: 

call selectNodeByAttr $$1, $$2, $$3, $$4;
if (!##return) return "";
$$ret = gettext(seltopx, seltopy, selendx, selendy);
escape;
return $$ret;
 
//----------------------------------------------------------
getElementById: 

call selectNodeById $$1, $$2;
if (!##return) return "";
$$ret = gettext(seltopx, seltopy, selendx, selendy);
escape;
return $$ret;
 
//----------------------------------------------------------
getElementByAttrId: 

call selectNodeByAttrId $$1, $$2, $$3;
if (!##return) return "";
$$ret = gettext(seltopx, seltopy, selendx, selendy);
escape;
return $$ret;
 
//==========================================================
// x個目のノードを得る 
//----------------------------------------------------------
	
//----------------------------------------------------------
getElementByTagNameAt: 

call selectNodeByTagNameAt $$1, ##2, $$3;
if (!##return) return "";
$$ret = gettext(seltopx, seltopy, selendx, selendy);
escape;
return $$ret;
 
//----------------------------------------------------------
getElementByTagAttrAt: 

call selectNodeByTagAttrAt $$1, $$2, $$3, ##4, $$5;
if (!##return) return "";
$$ret = gettext(seltopx, seltopy, selendx, selendy);
escape;
return $$ret;
 
//----------------------------------------------------------
getElementByAttrAt: 

call selectNodeByAttrAt $$1, $$2, ##3, $$4;
if (!##return) return "";
$$ret = gettext(seltopx, seltopy, selendx, selendy);
escape;
return $$ret;
   
//==========================================================
// ノードの配列を得る 
//----------------------------------------------------------
// ノードを検索し、各ノードの開始タグから終了タグまでを
// （終了タグ直後に改行がある場合、それも含めて）
// 文字列変数に格納します。
//----------------------------------------------------------
	
//----------------------------------------------------------
getElementsByTagName: 

##i = 0;
##tagsIndex = ##tagsIndex + 1;
call getElementByTagName $$1, "alldown", $$2;
while ($$return != "") {
	$getElementsByTagName[##tagsIndex][##i] = $$return;
	##i = ##i+1;
	moveto selendx, selendy;
	call getElementByTagName $$1, "down", $$2;
}
#getElementsByTagNameLength[##tagsIndex] = ##i-1;

return ##tagsIndex;
 
//----------------------------------------------------------
getElementsByTagAttr: 

##i = 0;
##tagsIndex = ##tagsIndex + 1;
call getElementByTagAttr $$1, $$2, $$3, "alldown", $$4;
while ($$return != "") {
	$getElementsByTagAttr[##tagsIndex][##i] = $$return;
	##i = ##i+1;
	moveto selendx, selendy;
	call getElementByTagAttr $$1, $$2, $$3, "down", $$4;
}
#getElementsByTagAttrLength[##tagsIndex] = ##i-1;

return ##tagsIndex;
 
//----------------------------------------------------------
getElementsByAttr: 

##i = 0;
##tagsIndex = ##tagsIndex + 1;
call getElementByAttr $$1, $$2, "alldown", $$3;
while ($$return != "") {
	$getElementsByAttr[##tagsIndex][##i] = $$return;
	##i = ##i+1;
	moveto selendx, selendy;
	call getElementByAttr $$1, $$2, "down", $$3;
}
#getElementsByAttrLength[##tagsIndex] = ##i-1;

return ##tagsIndex;
  
//==========================================================
// 特殊操作 
//----------------------------------------------------------
	
//----------------------------------------------------------
searchNodeTop: 

if ($$2 == "alldown") gofiletop; else if ($$2 == "allup") gofileend;

searchNodeTop_main:

if ($$2 == "allup" || $$2 == "up") searchup $$1, regular; else searchdown $$1, regular;
if (!result) return 0;

##topX = x;
##topY = y;
searchdown ">";
right;
##endX = x;
##endY = y;

searchup "<!--";
if (result) {
	searchdown "-->";
	if (!result) return 0;
	else if ((x >= ##endX && y == ##endY)|| y > ##endY) goto searchNodeTop_main;
	moveto ##topX, ##topY;
}

searchup "[^\t ]", regular;
if ((x > 0 && y == ##endY)|| y < ##endY) ##topX = 0;
moveto ##endX, ##endY;
beginsel;
moveto ##topX, ##topY;

return 1;
 
//----------------------------------------------------------
getDocumentType: 

gofileend;
searchup "<!DOCTYPE ";
if (!result) return "";

##topx = x;
##topy = y;
searchdown " ";
right;
##seltopx = x;
##seltopy = y;
searchdown " ";
$$doctype = gettext(##seltopx, ##seltopy, x, y);

escape;
moveto ##topx, ##topy;

return $$doctype;
 
//----------------------------------------------------------
getNodeInner: 

$$node = rightstr($$1, strlen($$1) - strstr($$1, "<") - 1);

//開始タグとその前の空白・改行を取り除く
while (leftstr($$node, 1) != ">") $$node = rightstr($$node, strlen($$node) - 1);
$$node = rightstr($$node, strlen($$node) - 1);
while (leftstr($$node, 1) == "\x0A" ||
		leftstr($$node, 1) == "\x0D" ||
		leftstr($$node, 1) == "\x09" ||
		leftstr($$node, 1) == " ")
	$$node = rightstr($$node, strlen($$node) - 1);

//終了タグとその後の空白・改行を取り除く
while (rightstr($$node, 1) != "<") $$node = leftstr($$node, strlen($$node) - 1);
$$node = leftstr($$node, strlen($$node) - 1);
while (rightstr($$node, 1) == "\x0A" ||
		rightstr($$node, 1) == "\x0D" ||
		rightstr($$node, 1) == "\x09" ||
		rightstr($$node, 1) == " ")
	$$node = leftstr($$node, strlen($$node) - 1);

return $$node;
 
//----------------------------------------------------------
goNodeTopToEnd: 

call _selectNode x, y;
moveto selendx, selendy;
escape;
if ($$1 == "inner") {
	searchup "<";
	escape;
}
return;
   
//==========================================================
// 新しいノードを生成する 
//----------------------------------------------------------
	
_createNode: 

$$beforeInnerCR = "";
$$afterInnerCR = "";
$$CR = "";

if ($$4 == "after") {
	$$CR = "\n";
} else if ($$4 == "inner") {
	$$beforeInnerCR = "\n\t";
	$$afterInnerCR = "\n";
	$$CR = "\n";
}

if ($$3 == "<empty>" || $$3 == "<>") return "<"+$$1+" />"+$$CR;
else return "<"+$$1+">"+$$beforeInnerCR+$$3+$$afterInnerCR+"</"+$$2+">"+$$CR;
 
//----------------------------------------------------------
createNode: 

call _createNode $$1, $$1, $$2, $$3;
return $$return;
 
//----------------------------------------------------------
createNodeWithId: 

call _createNode $$1+" id=\""+$$2+"\"", $$1, $$3, $$4;
return $$return;
 
//----------------------------------------------------------
createNodeWithAttr: 

call _createNode $$1+" "+$$2+"=\""+$$3+"\"", $$1, $$4, $$5;
return $$return;
   
